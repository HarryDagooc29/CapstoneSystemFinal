@model HarryMidterm.Entities.Addloanrecord


<meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"
  integrity="sha512-fD9DI5bZwQxOi7MhYWnnNPlvXdp/2Pj3XSTRrFs5FQa4mizyGLnJcN6tuvUS6LbmgN1ut+XGSABKvjN0H6Aoow=="
  crossorigin="anonymous" referrerpolicy="no-referrer"></script>


<style>
body{
     background-color: #4aac5f;
}

</style>




<!DOCTYPE html>
<html>
<head>

    <title>Add Loan Record</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 30px;
        }

        form {
            border: 3px solid #ccc;
            padding: 20px;
            border-radius: 8px;
            width: 400px;
        }

        label {
            display: block;
            margin-bottom: 5px;
        }

        input {
            width: calc(100% - 12px);
            padding: 8px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        input:focus {
            outline: none;
            border-color: #4CAF50;
        }

        #result {
            font-weight: bold;
            margin-top: 20px;
        }
        .buttonHome{
            position: relative;
            top: 10px;
            font-size: 25px;    
             background-color: green; 
        }
        .buttonSave{
            position: relative;
            top: 10px;
            font-size: 25px;   
            background-color: green; 
        }
        .design{
        background-color: #307d41;
        border-radius: 7px;
        color: white;
        }
        .iconLoanRecords{
            position: relative;
            top: 10px;
            left: 950px;
            font-size: 25px;
             background-color: green; 
        }
    </style>
</head>
<body>

    <template id="fnameOptionTemplate">
    <option value=""></option>
</template>

    <center><h1 class = "design">Add Loan Record</h1></center>
     @* <button type="button" onclick="location.href='/LoginPage/HomePage'" class="btn btn-outline-warning buttonHome" title="Home"> <i class="fa-solid fa-house" style="color: #4ac4b6;"></i> Home</button> *@
<button type="button" onclick="redirectToHome()" class="btn btn-outline-warning buttonHome" title="Home"> 
    <i class="fa-solid fa-house" style="color:#4ac4b6;"></i> Home
</button>
<button type="button" onclick="redirectToLoanRecords()" class="btn btn-outline-warning iconLoanRecords" title="Loan Records"> 
    <i class="fa-solid fa-briefcase" style="color: #4ac4b6;"></i> Loan Records
</button>
    <center>
         <script>
    function redirectToLoanRecords() {
        // Display SweetAlert confirmation before redirecting
        Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to go to the loan records page.',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#4ac4b6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, go to Loan Records!',
        }).then((result) => {
            if (result.isConfirmed) {
                // If confirmed, redirect to the home page
                window.location.href = '/LoginPage/LoanRecords';
            }
        });
    }
</script>

        <script>
    function redirectToHome() {




        // Display SweetAlert confirmation before redirecting
        Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to go to the home page.',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#4ac4b6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, go to Home!',
        }).then((result) => {
            if (result.isConfirmed) {
                // If confirmed, redirect to the home page
                window.location.href = '/LoginPage/HomePage';
            }
        });
    }
</script>


   
 <br>

    @* <form id="loanForm">
    
        <label for="date">Date Allocated</label>
        <input type="date" id="date" placeholder="Date Allocation">
        <label for="principal">Principal amount:</label>
        <input type="number" id="principal" step="0.01" placeholder="Enter principal amount" required oninput="calculateRepayment()">

        <label for="interestRate">Annual interest rate:</label>
        <input type="number" id="interestRate" step="0.01" placeholder="Enter annual interest rate" required oninput="calculateRepayment()">

        <label for="loanTerm">Loan term in months:</label>
        <input type="number" id="loanTerm" placeholder="Enter loan term in months" required oninput="calculateRepayment()">

        <label for="paymentStart">Payment Start Date</label>
        <input type="date" id="paymentStart" placeholder="Payment Start Date">

      <button type="submit" class="btn btn-outline-warning buttonSave" title="Home"> <i class="fa-solid fa-save" style="color: #4ac4b6;"></i> Save </button>

    </form> *@
    <style>
    #loanForm {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        max-width: 600px; /* Adjust the maximum width as needed */
        margin: 0 auto;
    }

    #loanForm label {
        display: block;
        margin-bottom: 5px;
    }

    #loanForm input {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
    }

    #loanForm button {
        grid-column: span 2; /* Make the button span across both columns */
    }
</style>

<style>
    
         input::placeholder {
            transition: transform 0.5s ease-in-out;
            font-size: 11.5px;
        }

        input:focus::placeholder {
            transform: translateY(-10px);
        }
    </style>


<form id="loanForm" method="post">
    
    <div>
        <label for="date">Date Allocated</label>
        <input type="date" id="date" placeholder="Date Allocation" required asp-for="DateAllocated">
    </div>
     <div>
        <label for="paymentStart">Payment Start Date</label>
        <input type="date" id="paymentStart" placeholder="Payment Start Date" required asp-for="PaymentStartDate">
    </div>
     <div>
        <label  class="control-label">Last Name</label>
       <select asp-for="LastName" id="lname"  class="form-select"></select>
    </div>
  

     <div>
        <label  class="control-label">First Name</label>
       <select asp-for="FirstName" id="fname" class="form-select"></select>
    </div>


    <div>
        <label for="principal">Principal amount:</label>
        <input type="number" id="principal" step="0.01" placeholder="Enter principal amount" required asp-for="PrincipalAmount" oninput="calculateRepayment()"min="3000">
    </div>

    <div>
        <label for="interestRate">Annual interest rate:</label>
        <input type="number" id="interestRate" step="0.01" placeholder="Enter annual interest rate" required asp-for="AnnualInterestRate" oninput="calculateRepayment()">
    </div>

    <div>
        <label for="loanTerm">Loan term in months:</label>
        <input type="number" id="loanTerm" placeholder="Enter loan term in months" required asp-for="LoanTermMonths" oninput="calculateRepayment()">
    </div>
     <div>
        <label for="loanTermDays">Loan term in days:</label>
        <input type="number" id="loanTermDays" placeholder="Enter loan term in days" required asp-for="LoanTermDays" oninput="calculateDaysRepayment()" >
    </div>

       @* <p id="result" name="PaymentMonthsDays"></p>  *@

    
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

  
    <script>
    document.getElementById('loanTerm').addEventListener('input', function() {
        var loanTermMonths = this.value;
        var loanTermDaysInput = document.getElementById('loanTermDays');

        if (loanTermMonths) {
            loanTermDaysInput.disabled = true;
            loanTermDaysInput.value = ""; // Clear the value if it was entered
        } else {
            loanTermDaysInput.disabled = false;
        }
    });

    document.getElementById('loanTermDays').addEventListener('input', function() {
        var loanTermDays = this.value;
        var loanTermMonthsInput = document.getElementById('loanTerm');

        if (loanTermDays) {
            loanTermMonthsInput.disabled = true;
            loanTermMonthsInput.value = ""; // Clear the value if it was entered
        } else {
            loanTermMonthsInput.disabled = false;
        }
    });




     $(document).ready(function () {
      fname();

      function fname() {

            $.ajax("../api/newapi/getfname")
                .done(function (result) {



                    var template = document.querySelector("template#fnameOptionTemplate");
                    var parent = document.querySelectorAll("#lname");


                    for (i = 0; i < parent.length; i++) {
                        result.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            cloned.querySelector("option").value = item.newBorrowerId;
                            cloned.querySelector("option").innerText = item.lastName;

                            parent[i].prepend(cloned);
                        });
                    }

                });
        }



         const depSelect = document.querySelector("#lname");
        const lnameSelect = document.querySelector("#fname");

        // Function to populate the result select with data
        function populateResultSelect(selectedValue) {


            $.ajax("../api/newapi/getfname")
                .done(function (data) {


                    // Filter the data based on the selected category
                    const datos = data.filter(item => item.newBorrowerId == selectedValue);

                    // Clear the existing options in the result select
                    lnameSelect.innerHTML = "";

                    // Populate the result select with the filtered data
                    datos.forEach((item) => {
                        const option = document.createElement("option");
                        option.value = item.newBorrowerId;
                        option.innerText = item.firstName;
                        lnameSelect.appendChild(option);
                    });


                });
        }

        // Initial population of the result select based on the default selected value
        populateResultSelect(depSelect.value);

        // Event listener to update the result select when the category select changes
        depSelect.addEventListener("change", function () {
            const selectedValue = this.value;
            populateResultSelect(selectedValue);
        });



        });



    
</script>

 

    @* <button type="submit" class="btn btn-outline-warning buttonSave" title="Home"> <i class="fa-solid fa-save" style="color: #4ac4b6;"></i> Save </button> *@
    <button type="submit"  value="AddLoan" class="btn btn-outline-warning buttonSave" title="Save" onclick="saveData()"> 
    <i class="fa-solid fa-save" style="color: #4ac4b6;"></i> Save 
</button>

</form>
<br>


<form method="post">

<p id="result" name="PaymentMonthsDays"></p>

</form>
 

    <script>
        function saveData() {


           //ayaw ni tan dug kani dre nga line
            var formelements = $("#loanForm");

            //getting the data from the form
            var formInputs = $("#loanForm").serializeArray();

             if (formInputs[0].value !== '' && formInputs[1].value !== '' && formInputs[2].value !== '' && formInputs[3].value !== '' && formInputs[1].value !== '' && formInputs[1].value !== '' && formInputs[4].value !== '' && formInputs[5].value !== '' && formInputs[6].value !== '') {

                 Swal.fire({
            icon: 'success',
            title: 'Data Saved!',
            text: 'Your data has been successfully saved.',
            confirmButtonColor: '#4ac4b6', // Match the color to your design
           
        });




                }else{

                  Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Input the necessary elements!',
                 })

                }
    
    }
    
        function calculateRepayment() {
            const principal = parseFloat(document.getElementById('principal').value);
            const interestRate = parseFloat(document.getElementById('interestRate').value);
            const loanTerm = parseFloat(document.getElementById('loanTerm').value);
            const loanTermDays = parseFloat(document.getElementById('loanTerm').value);

          
            const monthlyPayment = calculateMonthlyRepayment(principal, interestRate, loanTerm);
            const totalPayment = monthlyPayment * loanTerm;
            const totalInterest = totalPayment - principal;
            const totalAmount = principal + totalInterest;

         

            const resultText = `Monthly Payment: ₱${monthlyPayment.toFixed(2)}<br>Total Interest: ₱${totalInterest.toFixed(2)}<br>Total Amount (Principal + Interest): ₱${totalAmount.toFixed(2)}`;
            document.getElementById('result').innerHTML = resultText;

          

            
        }

        function calculateMonthlyRepayment(P, r, n) {
            const monthlyInterest = r / 12; // Assuming the interest is an annual rate
            const power = Math.pow(1 + monthlyInterest, n);
            const repayment = (P * monthlyInterest * power) / (power - 1);
            return repayment;
        }
        


        function calculateDaysRepayment() {
    const principal = parseFloat(document.getElementById('principal').value);
    const interestRate = parseFloat(document.getElementById('interestRate').value);
    const loanTerm = parseFloat(document.getElementById('loanTerm').value);
    const loanTermDays = parseFloat(document.getElementById('loanTermDays').value); // Assuming you have an input field for the loan term in days

    const dailyPayment = calculateDailyRepayment(principal, interestRate, loanTermDays);
    const totalPayment = dailyPayment * loanTermDays;
    const totalInterest = totalPayment - principal;
    const totalAmount = principal + totalInterest;

    const resultText = `Daily Payment: ₱${dailyPayment.toFixed(2)}<br>Total Interest: ₱${totalInterest.toFixed(2)}<br>Total Amount (Principal + Interest): ₱${totalAmount.toFixed(2)}`;
    document.getElementById('result').innerHTML = resultText;
}

function calculateDailyRepayment(P, r, n) {
    const dailyInterest = r / 365; // Assuming interest is calculated on a daily basis
    const power = Math.pow(1 + dailyInterest, n);
    const repayment = (P * dailyInterest * power) / (power - 1);
    return repayment;
}
    </script>
   
</body>
</html>



